{"version":3,"sources":["src/utils.js","src/GameResult.js","src/Baseball.js","src/GuessInputControl.js","src/app.js"],"names":["getRandomInt","min","max","a","Math","floor","random","console","log","GameResult","digit","strike","ball","resultString","Baseball","problem","makeProblem","arr","index","tempValue","bb","indexOf","values","guessEl","GuessInputControl","containerSelector","digitNumber","inputEl","document","querySelector","Error","addEventListener","e","target","value","keyCode","Array","from","map","v","Number","length","callback","clear","disable","placeholder","App","queryParam","URLSearchParams","location","search","get","inputControl","handleGuess","bind","resultsContainerEl","error","alert","message","result","getResult","isDone","blockGame","insertAdjacentHTML","createResultEl","toString","b"],"mappings":";;AIAA;;AACA;;;AFDA,AFAO,SAASA,YAAT,CAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AACrC;AEAF,AFCE;AACA,MAAIC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBJ,GAAG,GAAGD,GAAN,GAAY,CAA7B,CAAX,IAA8CA,GAAtD,CAHqC,CAIrC;AACA;;AACAM,EAAAA,ECNmBE,AEAAe,KHMZ,CAAChB,GAAR,CAAY,iBAAZ,EAA+BL,CAA/B;ACLA,AEAA,AHMA,IIJI2C,KJIG3C,CAAP;ACLA,AEAA,ACEA,AJID,iBIJe,KHFFO,KAAZ,EAAmBC,AEAPc,MFAZ,EAA2Bb,IAA3B,EAAiC,GEAjC,EAA+Bc,WAA/B,EAA4C;AFAX,AEAW,ACE9B;;AHDZ,AED0C,ACG1C,QAAMqB,CHFDrC,KAAL,GAAaA,CGEG,GAAG,CHFnB,GGEuBsC,eAAJ,CAAoBC,QAAQ,CAACC,MAA7B,CAAnB;AHDA,AGEA,IFHiBpC,KDCZH,AGEAD,KAAL,CHFA,EGEaqC,CHFCpC,MAAd,GGEuB,CAACwC,GAAX,CAAe,OAAf,CAAb,CAFY,CAE0B;AFFxC,ADCE,AEFA,SFEKvC,IAAL,GAAYA,IAAZ,ECDqB;AAAA,ADEtB,AEFC,ACGA,QFHUF,CCALiB,ACGAb,IFHgB,GCArB,CCGA,EDHec,CCGC,IAAId,GDHG,CAACe,aAAT,ACGC,CDHsBJ,ACGT,KAAKf,KAAlB,CAAhB,CAHY,CAG8B,IDH3B,CAAf,CAF0C,CAEgB,sBDAxC,CAAG;;AAAA,ACErB,ACEA,QDFI,KAAKiB,OAAL,IAAgB,IAApB,EAA0B;AACxB,ACEN,YDFYG,KAAK,CAAC,sBAAD,CAAX;ADFF,ACGC,ACEL,WHFE,kBAAS;ACFP,ADGA,AGEJ,SFLSpB,KAAL,GAAaA,KAAb,CAFqB,CAED;ADIpB,AEAA,ACEJ,SDFSiB,CFAD,KAAKf,CEAT,CAAamB,EFAT,IAAa,CAAb,IAAkB,KAAKpB,AEA3B,CAA8B,KFAR,IAAe,AEArC,EAAyC,GFACD,KAA1C,EAAiD,AEAPsB,CAAD,EAAO;ADHhD,ADIE,AEAAzB,ACEN,MDFMA,GDJGQ,ICII,CAACP,CFAD,CCJT,CCIE,CAAY,CDJC,ADIb,KCJkBQ,KCIlB,EAAyBgB,CAAzB,EAD8C,CDHjC,ACIgB,EDJ/B,CAHqB,CAGc;AACpC,ADIE,AEAC,ACEF,IFJF;ACGI;AFAF,AECE,ACEF,SAAKlB,IHHE,IGGP,CHHA,AGGcC,OAAd,CAZY,CAYW;AHFxB;AECGR,ACEF,MDFEA,GCEG6C,IDFI,CAAC5C,GAAR,CAAY,GCEd,GAAoB,IAAIgB,cDFtB,EAAsCQ,CAAC,CAACC,MAAF,CAASC,CCE7B,CAAsB,GDFxC,EAL8C,CAKS,ECErC,EAAgC;AAClD,WFPJ,uBAAc;AACZ,ACIE,ACGAQ,MAAAA,IDHIV,CFAR,AEAS,CAACG,ECGE,EAAE,GDHN,ECGWkB,GDHG,EAAlB,EAAsB,GFAf,CGGG,CAAiBC,IAAjB,CAAsB,IAAtB,CAFwC;AFJpD,ADIA,AEAI,ACEqC,UFNrCrC,ADIAJ,EEAMS,CDJH,GAAG,EAAV,ACIgB,CDNJ,CAEE,CCIKc,CFAH,IEAQ,CAACC,IAAN,CAAWL,CAAC,CAACC,MAAF,CAASC,CFAV,IEAV,CFAevB,CEAY2B,GAA3B,CAA+B,CFAlC,SEAmCC,CAAD,SFAD,KAAK3B,IAAtC,CAAhB;AEAkD,ACGhDc,MAAAA,WDHuDc,ACG5C,EAAE,IDHgD,CAACD,ACG5C7B,CDH2C,CAAb,GCAE,CAGzB;AFN3B,ADIA,AEDkD,SAA/B,CDHfQ,ADIA,AEDA,KDHK,ADIAP,GCJG,CAAZ,EDII,KAAgB,CAAhB,IAAqB,KAAKC,IAAL,KAAc,CAAvC,EAA0C;AACxCC,AEDEN,ACDgD,KAAhC,CAApB,EHEEM,AEDEN,OAAO,CAACC,GAAR,CFCU,AEDE,GFCC,KAAf,CEDE,EAAuBc,MAAvB,EAFoB,CAGpB;ADJJ,ADKC,AEAG,ACEJ,OHJA,EGIKiC,IFPErC,ADKA,IAAI,CCLC,GAAG,CDKCP,ICLID,CEOpB,CHFW,EGEekB,CFP1B,CDK0B,CCLC,IDKIlB,CGEG,CAACmB,GHF5B,EAA+B,QGEZ,CAAuB,mBAAvB,CAA1B;AFNE,ADKAhB,AGEH,QHFGA,ICLIK,KAAK,GDKG,CCLC,CAAb,CDKe,CCLC,ODK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","file":"app.a6a4d504.js","sourceRoot":"..","sourcesContent":["export function getRandomInt(min, max) {\r\n  // 2~9 --> 0.1 * 8 = 0.8 +2 = 2\r\n  // 1~9 -> 0.1 * 9 = 0.9 +1 = 1\r\n  let a = Math.floor(Math.random() * (max - min + 1)) + min;\r\n  //Math.floor() 함수는 주어진 숫자와 같거나 작은 정수 중에서 가장 큰 수를 반환합니다\r\n  //Math.random() 함수는 0 이상 1 미만의 구간에서 근사적으로 균일한 부동소숫점 의사난수를 반환\r\n  console.log('랜덤 숫자 만들기 >>>> ', a);\r\n  return a;\r\n}\r\n","export default class GameResult {\r\n  // 결과 얻기\r\n  constructor(digit, strike, ball) {\r\n    this.digit = digit;\r\n    this.strike = strike;\r\n    this.ball = ball;\r\n  }\r\n\r\n  isDone() {\r\n    //console.log('wonny ', this.toString());\r\n    if (this.ball == 0 && this.strike == this.digit) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  toString() {\r\n    let resultString = `Strike:${this.strike} Ball:${this.ball}`;\r\n    if (this.strike === 0 && this.ball === 0) {\r\n      resultString = 'OUT';\r\n    } else if (this.strike == this.digit) {\r\n      resultString = 'STRIKE';\r\n    } else {\r\n      resultString = `${this.strike} S ${this.ball} B`;\r\n    }\r\n    return resultString;\r\n  }\r\n}\r\n","import { getRandomInt } from './utils';\r\nimport GameResult from './GameResult';\r\n\r\nexport default class Baseball {\r\n  constructor(digit = 3) {\r\n    //digit: 매개 변수\r\n    this.digit = digit; // this.digit: private 설정 변수\r\n    this.problem = this.makeProblem(); // 정답 this,makeProblem 프로토타입, this.makeProblem(); 함수 콜\r\n  }\r\n\r\n  // 게임 문제 만들기 함수\r\n  makeProblem() {\r\n    //let arr = new Array(); //메모리를 쓴다\r\n    let arr = []; // 리터럴에서 쓴다\r\n    let index = 0;\r\n    while (index < this.digit) {\r\n      if (index == 0) {\r\n        //arr.push(getRandomInt(0, 9));\r\n        arr[index] = getRandomInt(0, 9);\r\n      } else {\r\n        let tempValue = getRandomInt(0, 9);\r\n        let bb = arr.indexOf(tempValue);\r\n        while (bb != -1) {\r\n          //존재하지 않으면\r\n          tempValue = getRandomInt(0, 9);\r\n          bb = arr.indexOf(tempValue);\r\n        }\r\n        arr[index] = tempValue;\r\n      }\r\n      index++;\r\n    }\r\n    console.log('정답: ', arr);\r\n    return arr;\r\n  }\r\n\r\n  // 정답 체크하기 함수\r\n  getResult(values) {\r\n    //guess: 내가 입력한 값\r\n    //problem: 정답\r\n    console.log('Baseball.js -> getResult 함수의 매개 변수 ', values); //undefined (3) [1, 2, 8]\r\n\r\n    let strike = 0;\r\n    let ball = 0;\r\n    let index = 0;\r\n    //console.log('this.problem: ', this.arr); //undefined\r\n    console.log('this.problem: ', this.problem); //(3) [6, 5, 4]\r\n\r\n    let guessEl;\r\n    while (index < this.digit) {\r\n      guessEl = values[index]; //입력한 값\r\n      if (guessEl == this.problem[index]) {\r\n        // 입력 == 정답\r\n        strike++;\r\n        console.log('자리랑 숫자가 일치함');\r\n      } else {\r\n        if (this.problem.indexOf(guessEl) > -1) {\r\n          ball++;\r\n          console.log('자리는 안맞음 숫자가 일치함');\r\n        }\r\n      }\r\n      index++;\r\n    } //while end\r\n    return new GameResult(this.digit, strike, ball);\r\n  }\r\n}\r\n","export default class GuessInputControl {\r\n  // 추측값을 입력 받는 클래스\r\n  constructor(containerSelector, digitNumber) {\r\n    // 추측되는 정답을 입력 받는 컨트롤 클래스\r\n    this.inputEl = document.querySelector(containerSelector); //#guess\r\n\r\n    if (this.inputEl == null) {\r\n      throw Error('컨테이너 아이디를 찾을 수 없습니다.');\r\n    }\r\n\r\n    this.inputEl.addEventListener('keydown', (e) => {\r\n      console.log('e는 무엇일까: ', e); // 마치 지켜보는 것처럼 키보드를 치면 생성된다.\r\n      //KeyboardEvent {isTrusted: true, key: \"1\", code: \"Digit1\", location: 0, ctrlKey: false, …}\r\n      //KeyboardEvent {isTrusted: true, key: \"2\", code: \"Digit2\", location: 0, ctrlKey: false, …}\r\n      //KeyboardEvent {isTrusted: true, key: \"Enter\", code: \"NumpadEnter\", location: 3, ctrlKey: false, …}\r\n      console.log('e.target.value는 무엇일까: ', e.target.value); //guess라는 id를 가진 상자에 들어 있는 값: 543\r\n      if (e.keyCode === 13) {\r\n        const values = Array.from(e.target.value).map((v) => Number(v));\r\n        console.log('values ', values);\r\n        //Array.from는 문자열을 하나하나 따로 배열로 값 넣는다. 543 -> [5,4,3]\r\n        //array.map(x => x * 2); map은 배열 내 각각을 -> 함수로 적용 -> 결과를 새로운 배열로 만듦\r\n        if (values.length != digitNumber.digitNumber) {\r\n          throw new Error('자릿수가 맞지 않습니다!');\r\n        }\r\n        digitNumber.callback(values); // 매개변수에 값을 전달을 이렇게 한다고? 다른 방법은 없나?\r\n\r\n        //정답이 맞았습니다.\r\n        //let test2 = digitNumber.getResult;\r\n        //console.log(test2);\r\n\r\n        this.clear();\r\n        return;\r\n      }\r\n    });\r\n  }\r\n  disable() {\r\n    this.inputEl.disable = true;\r\n    this.inputEl.placeholder = '게임 끝';\r\n  }\r\n\r\n  clear() {\r\n    this.inputEl.value = '';\r\n  }\r\n}\r\n","import Baseball from './Baseball';\r\nimport GuessInputControl from './GuessInputControl';\r\n\r\nclass App {\r\n  constructor() {\r\n    const queryParam = new URLSearchParams(location.search);\r\n    this.digit = queryParam.get('digit'); //digit=3\r\n    this.Baseball = new Baseball(this.digit); // 몇자리 만들까? Baseball 클래스에 값 설정\r\n    /*\r\n    console.log('App.js -> this.Baseball ', this.Baseball);\r\n    Baseball {digit: \"3\", problem: ƒ}\r\n    digit: \"3\"\r\n    problem: ƒ makeProblem()\r\n    */\r\n    //console.log('App.js -> this.Baseball.problem: ', this.Baseball.problem); //   makeProblem() 함수 내용을 통째로 불러옴\r\n\r\n    this.Baseball.problem; // Baseball 클래스에서 매개변수 콜? -> makeProblem 함수 실행 -> 문제 생성\r\n    this.inputControl = new GuessInputControl('#guess', {\r\n      // GuessInputControl: 추측값을 입력 받는 클래스\r\n      callback: this.handleGuess.bind(this), //함수를 그냥 부르면 window 객체 값을 불러옴. bind로 묶으면 그안에 있는 값을 가져옴\r\n      digitNumber: this.digit, //숫자\r\n    });\r\n    this.resultsContainerEl = document.querySelector('.result-container');\r\n  }\r\n\r\n  handleGuess(values, error) {\r\n    //에러\r\n    if (error) {\r\n      alert(error.message);\r\n      return;\r\n    }\r\n    console.log('App.js에 있는 handleGuess 함수: ', values); //(3) [9, 8, 7] : 입력한 값\r\n    let result = this.Baseball.getResult(values); //결과값 받기\r\n    console.log('result: ', result);\r\n\r\n    // element.insertAdjacentHTML(position, text); 위치와 집어 넣을 text\r\n    //console.log(result.isDone);\r\n    console.log(result.isDone());\r\n    if (result.isDone()) {\r\n      alert('정답입니다');\r\n      this.blockGame();\r\n    }\r\n    this.resultsContainerEl.insertAdjacentHTML('afterbegin', this.createResultEl(values, result.toString()));\r\n  }\r\n\r\n  createResultEl(a, b) {\r\n    console.log('a: ', a);\r\n    console.log('b: ', b);\r\n    return `<li class=\"list-group-item\">\r\n    <span class=\"guess\">${a}</span>\r\n    <span class=\"badge result\">${b}</span>\r\n    </li>`;\r\n  }\r\n\r\n  blockGame() {\r\n    this.inputControl.disable();\r\n  }\r\n}\r\n\r\nnew App();\r\n"]}